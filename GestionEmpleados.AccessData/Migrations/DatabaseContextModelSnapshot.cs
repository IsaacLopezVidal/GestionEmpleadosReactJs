// <auto-generated />
using System;
using GestionEmpleados.AccessData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionEmpleados.AccessData.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Catalogos", b =>
                {
                    b.Property<int>("CatalogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Catalogo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("CatalogoId");

                    b.ToTable("Catalogos");

                    b.HasData(
                        new
                        {
                            CatalogoId = 1,
                            Catalogo = "Cargo"
                        },
                        new
                        {
                            CatalogoId = 2,
                            Catalogo = "Departamento"
                        },
                        new
                        {
                            CatalogoId = 3,
                            Catalogo = "Rol"
                        },
                        new
                        {
                            CatalogoId = 4,
                            Catalogo = "EstatusVacaciones"
                        },
                        new
                        {
                            CatalogoId = 5,
                            Catalogo = "Tipo de Relacion"
                        });
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.CatalogosDescripciones", b =>
                {
                    b.Property<int>("CatalogoDescripcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CatalogoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValorAlfanumerico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ValorDouble")
                        .HasColumnType("REAL");

                    b.Property<int>("ValorEntero")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValorFecha")
                        .HasColumnType("TEXT");

                    b.HasKey("CatalogoDescripcionId");

                    b.HasIndex("CatalogoId", "CatalogoDescripcionId")
                        .IsUnique();

                    b.ToTable("CatalogosDescripciones");

                    b.HasData(
                        new
                        {
                            CatalogoDescripcionId = 1000,
                            CatalogoId = 1,
                            Descripcion = "Director",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 1001,
                            CatalogoId = 1,
                            Descripcion = "Subdirector",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 1002,
                            CatalogoId = 1,
                            Descripcion = "Gerente",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 1003,
                            CatalogoId = 1,
                            Descripcion = "Vendedor",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 2000,
                            CatalogoId = 2,
                            Descripcion = "Ventas",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 3000,
                            CatalogoId = 3,
                            Descripcion = "Director",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 3001,
                            CatalogoId = 3,
                            Descripcion = "Empleado",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 4000,
                            CatalogoId = 4,
                            Descripcion = "Pendiente",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 4001,
                            CatalogoId = 4,
                            Descripcion = "Aprobada",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 4002,
                            CatalogoId = 4,
                            Descripcion = "Rechazada",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 5000,
                            CatalogoId = 5,
                            Descripcion = "Padre",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 5001,
                            CatalogoId = 5,
                            Descripcion = "Madre",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 5002,
                            CatalogoId = 5,
                            Descripcion = "Esposo/a",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 5003,
                            CatalogoId = 5,
                            Descripcion = "Hijo/a",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CatalogoDescripcionId = 5004,
                            CatalogoId = 5,
                            Descripcion = "Conyuge",
                            ValorAlfanumerico = "",
                            ValorDouble = 0.0,
                            ValorEntero = 0,
                            ValorFecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Empleado", b =>
                {
                    b.Property<int>("EmpleadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CargoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartamentoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmpleadoID");

                    b.HasIndex("CargoID");

                    b.HasIndex("DepartamentoID");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Familiar", b =>
                {
                    b.Property<int>("FamiliarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RelacionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("FamiliarID");

                    b.HasIndex("EmpleadoID");

                    b.HasIndex("RelacionID");

                    b.ToTable("Familiar");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.SolicitudVacaciones", b =>
                {
                    b.Property<int>("SolicitudID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComentarioJefe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpleadoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstatusID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.HasKey("SolicitudID");

                    b.HasIndex("EmpleadoID");

                    b.HasIndex("EstatusID");

                    b.ToTable("SolicitudVacaciones");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpleadoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioID");

                    b.HasIndex("EmpleadoID");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UsuarioID", "RolID");

                    b.HasIndex("RolID");

                    b.ToTable("UsuarioRol");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.CatalogosDescripciones", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.Catalogos", "Catalogos")
                        .WithMany()
                        .HasForeignKey("CatalogoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catalogos");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Empleado", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.CatalogosDescripciones", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionEmpleados.Models.Domain.CatalogosDescripciones", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Familiar", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionEmpleados.Models.Domain.CatalogosDescripciones", "TipoRelacion")
                        .WithMany()
                        .HasForeignKey("RelacionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("TipoRelacion");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.SolicitudVacaciones", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionEmpleados.Models.Domain.CatalogosDescripciones", "EstatusVacaciones")
                        .WithMany()
                        .HasForeignKey("EstatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("EstatusVacaciones");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.Usuario", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("GestionEmpleados.Models.Domain.UsuarioRol", b =>
                {
                    b.HasOne("GestionEmpleados.Models.Domain.CatalogosDescripciones", "Rol")
                        .WithMany()
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionEmpleados.Models.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
